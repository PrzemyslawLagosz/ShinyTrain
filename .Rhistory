geom_histogram(stat="count")
ggplot(diamonds_F, aes(x =cut, color = clarity)) +
geom_histogram(stat="count")
ggplot(diamonds_F, aes(x =cut, fill = clarity)) +
geom_histogram(stat="count")
ggplot(diamonds_F, aes(x =cut, fill = clarity)) +
geom_histogram(stat="count") +
labs(x = "Cut", y = "Number of diamonds")
ggplot(diamonds_F, aes(x =cut, fill = clarity)) +
geom_histogram(stat="count") +
labs(title="Cut F diamonds" ,x = "Cut", y = "Number of diamonds")
ggplot(diamonds_F, aes(x =cut, fill = clarity)) +
geom_histogram(stat="count") +
labs(title="Cut F diamonds" ,x = "Cut", y = "Number of diamonds", fill = "Clarity")
wykres2
#7
wykres2 <- ggplot(diamonds, aes(x = carat, y= price, color = color, shape = cut)) +
geom_point() +
labs(title = "Price vs carat", subtitle = "Na tle koloru i stanu", x = "Carat", y= "Price", color = "color", shape = "Cut")
wykres2
#7
wykres2 <- ggplot(diamonds, aes(x = carat, y= price, color = color, shape = cut)) +
geom_point() +
labs(title = "Price vs carat", subtitle = "Na tle koloru i stanu", x = "Carat", y= "Price")
wykres2
install.packages("data.table")            # Install data.table package
library("data.table")
transpose(dane_summary)
x[,1]
x[1]
x <- transpose(dane_summary)
x[,1]
x[1, ]
colnames(x) <- x[1, ]
x
x
x[-1, ]
#5
dane_summary <- dane %>%
group_by(color) %>%
summarise(liczba_obserwacji = n(),
srednia_cena = mean(price),
mediana_ceny = median(price),
trzeci_kwartyl = quantile(price, probs = .75),
srednia_cena = mean(carat),
mediana_ceny = median(carat),
pierwszy_kwartyl = quantile(price, probs = .25))
dane_summary
#5
dane_summary <- dane %>%
group_by(color) %>%
summarise(liczba_obserwacji = n(),
srednia_cena = round(mean(price), 3),
mediana_ceny = median(price),
trzeci_kwartyl = quantile(price, probs = .75),
srednia_cena = mean(carat),
mediana_ceny = median(carat),
pierwszy_kwartyl = quantile(price, probs = .25))
#5
dane_summary <- dane %>%
group_by(color) %>%
summarise(liczba_obserwacji = n(),
srednia_cena = round(mean(price), 2),
mediana_ceny = median(price),
trzeci_kwartyl = quantile(price, probs = .75),
srednia_cena = mean(carat),
mediana_ceny = median(carat),
pierwszy_kwartyl = quantile(price, probs = .25))
#5
dane_summary <- dane %>%
group_by(color) %>%
summarise(liczba_obserwacji = n(),
srednia_cena = round(mean(price)),
mediana_ceny = median(price),
trzeci_kwartyl = quantile(price, probs = .75),
srednia_cena = mean(carat),
mediana_ceny = median(carat),
pierwszy_kwartyl = quantile(price, probs = .25))
x <- dane_summary
View(x)
x$srednia_cena <- round(x$srednia_cena)
x$srednia_cena <- round(x$srednia_cena, 3)
x <- dane_summary
x$srednia_cena <- round(x$srednia_cena, 3)
x <- transpose(dane_summary)
x <- dane_summary
x$srednia_cena <- round(x$srednia_cena, 3)
x <- transpose(x)
colnames(x) <- x[1, ]
x <- x[-1, ]
colnames(dane_summary)
nowy_columna <- colnames(dane_summary)[2:]
nowy_columna <- colnames(dane_summary)[2:-1]
nowy_columna <- colnames(dane_summary)[2:5]
nowy_columna
nowy_columna <- colnames(dane_summary)[2:length(colnames(dane_summary))]
nowy_columna
x <- x %>%
mutate(typ_danej = nowy_columna)
t(dane_summary)
str(t(dane_summary))
datasetInput <- function(id, filter = NULL) {
names <- ls("package:datasets")
if (!is.null(filter)) {
data <- lapply(names, get, "package:datasets")
names <- names[vapply(data, filter, logical(1))]
}
selectInput(NS(id, "dataset"), "Pick a dataset", choices = names)
}
datasetServer <- function(id) {
moduleServer(id, function(input, output, session) {
reactive(get(input$dataset, "package:datasets"))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
#message(data)
output$data <- renderTable(head(data()))
}
shinyApp(ui, server)
}
datasetApp()
library(shiny)
datasetApp()
datasetApp()
runApp('R/leaRn/Shiny/Mastering Shiny book/5_modules/app_mastering_shiny_5.4_exercise.R')
datasetApp()
datasetApp()
runApp('R/leaRn/Shiny/Mastering Shiny book/5_modules/app_mastering_shiny_5.4_exercise.R')
datasetApp()
eventReactive(input$dataset, message("kupka"))
datasetApp()
datasetInput <- function(id, filter = NULL) {
names <- ls("package:datasets")
if (!is.null(filter)) {
data <- lapply(names, get, "package:datasets")
names <- names[vapply(data, filter, logical(1))]
}
selectInput(NS(id, "dataset"), "Pick a dataset", choices = names)
}
datasetServer <- function(id) {
moduleServer(id, function(input, output, session) {
eventReactive(input$dataset, message("kupka"))
reactive(get(input$dataset, "package:datasets"))
})
}
buttonUI <- function(id) {
actionButton(NS(id, "click"), "Press me!")
}
buttonServer <- function(id) {
moduleServer(id, function(input, output, session)
{
eventReactive(input$click, message("kupka"))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
buttonUI("elo"),
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
output$data <- renderTable(head(data()))
buttonServer("elo")
}
shinyApp(ui, server)
}
datasetApp()
buttonServer <- function(id) {
moduleServer(id, function(input, output, session)
{
observeEvent(input$click, message("kupka"))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
buttonUI("elo"),
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
output$data <- renderTable(head(data()))
buttonServer("elo")
}
shinyApp(ui, server)
}
datasetApp()
datasetInput <- function(id, filter = NULL) {
names <- ls("package:datasets")
if (!is.null(filter)) {
data <- lapply(names, get, "package:datasets")
names <- names[vapply(data, filter, logical(1))]
}
selectInput(NS(id, "dataset"), "Pick a dataset", choices = names)
}
datasetServer <- function(id) {
moduleServer(id, function(input, output, session) {
eventReactive(input$dataset, message("kupka"))
reactive(get(input$dataset, "package:datasets"))
})
}
buttonUI <- function(id) {
actionButton(NS(id, "click"), "Press me!")
}
buttonServer <- function(id, value) {
moduleServer(id, function(input, output, session)
{
observeEvent(input$click, message(value))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
buttonUI("elo"),
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
output$data <- renderTable(head(data()))
buttonServer("elo", data())
}
shinyApp(ui, server)
}
datasetApp()
### SELECT VAR MODULES ###
selectVarInput <- function(id) {
selectInput(NS(id, "var"), "Variable", choices = NULL)
}
find_vars <- function(data, filter) {
names(data)[vapply(data, filter, logical(1))]
}
### SELECT VAR MODULES ###
selectVarInput <- function(id) {
selectInput(NS(id, "var"), "Variable", choices = NULL)
}
find_vars <- function(data, filter) {
names(data)[vapply(data, filter, logical(1))]
}
selectVarServer <- function(id, data, filter = is.numeric) {
moduleServer(id, function(input, output, session){
observeEvent(data(), {
updateSelectInput(session, "var", choices = find_vars(data(), filter))
})
reactive(data()[[input$var]])
})
}
selectVarApp <- function(filter = is.numeric) {
ui <- fluidPage(
datasetInput("data", is.data.frame),
selectVarInput("var"),
verbatimTextOutput("out")
)
server <- function(input, output, session) {
data <- datasetServer("data")
var <- selectVarServer("var", data, filter = filter)
output$out <- renderPrint(var())
}
shinyApp(ui, server)
}
selectVarApp()
runApp('R/leaRn/Shiny/Moodtracker/moodApp.R')
runApp('R/leaRn/Shiny/Moodtracker/moodApp.R')
saved_passwords <- read_csv("C:\\Users\\Przemo\\Documents\\R\\leaRn\\Shiny\\Moodtracker\\saved_passwords.csv")
saved_passwords
saved_users_list
saved_passwords
which(saved_passwords$user_pas == test123)
which(saved_passwords$user_pas == "test123")
which(saved_passwords$user_pas == "tester1234")
load("auta.Rdata")
setwd("C:/Users/Przemo/Desktop/IT/R/TrainShiny01")
load("auta.Rdata")
seq_last <- function(x, interval) {
#x is vector
seq <- seq(from = min(x), to = max(x), by = interval)
if (tail(seq, 1) == max(x)) {
return(seq)
} else {
seq <- c(seq, max(x))
return(seq)
}
}
interval_group_by <- function(df, column_interval, column_calculate, interval, dig.lab = 5) {
# DF to coalculeta
# column_interval <- column turned into intervals with cut and group_by
# column_calcularte <- column to calculate mean and median in intervals
# interval <- value of the interval
column_interval <- enquo(column_interval)
column_calculate <- enquo(column_calculate)
df_grouped_by_interval <- df %>%
mutate(year_intervals = cut(!!column_interval, seq_last(!!column_interval, interval), dig.lab = dig.lab)) %>%
group_by(year_intervals) %>%
summarise(mean_by_interval = mean(!!column_calculate),
median_by_interval = median(!!column_calculate)) %>%
drop_na()
return(df_grouped_by_interval)
}
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
interval_df
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
interval_df
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
library(tidyverse)
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
interval_df
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
if (TRUE) {
geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)
}
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
{geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)}
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)
warnings()
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
interval_df
mean_element <- function(show = FALSE) {
if (show) {
geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)
}
}
mean_element()
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5))
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
mean_element()
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
mean_element()
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
mean_element(show = TRUE)
mean_element <- function(show = FALSE) {
list(
if (show) {
geom_hline(yintercept = mean(interval_df$mean_by_interval )/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(interval_df$mean_by_interval )/1000,
x = nrow(interval_df)-1,
vjust = -1)
})
}
ggplot(interval_df, aes(x = reorder(year_intervals , year_intervals ), y= mean_by_interval /1000)) +
geom_col() +
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5)) +
mean_element(show = TRUE)
